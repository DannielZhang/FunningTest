@page "/game"

@using BlazorApp.Data
@using System.Drawing;
@using System.Linq;
@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@using BootstrapBlazor.Components;

@inject WeatherForecastService testService

<h1>小游戏！</h1>
<div class="row">

    <div class=".col-md-8" style="background-color:azure">
        <h2>placeholder</h2>
        <BECanvas Width="700" Height="400" @ref="_canvasReference"></BECanvas>
    </div>
    <div class=".col-md-4" style=" background-color:black">
        <h2>placeholder</h2>

        <button id="player1" class="btn btn-primary" @onclick="player1BtnClick">玩家1</button>
        <button id="player2" class="btn btn-primary" @onclick="player2BtnClick">玩家2</button>
    </div>

</div>



@code{

    private Canvas2DContext _context;

    protected BECanvasComponent _canvasReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        this._context = await this._canvasReference.CreateCanvas2DAsync();
        //await this._context.SetFillStyleAsync("green");

        //await this._context.FillRectAsync(10, 100, 100, 100);

        // 构建三个行包围盒
        int height = 80;
        int padding_y = 15;

        //放置物件包围盒
        int part_x = 10;
        int part_y = 65;

        for (int i = 0; i < 3; i++)
        {
            int outterRect_y = 15 + (height + padding_y) * i;

            await this._context.SetFillStyleAsync("gray");
            await this._context.FillRectAsync(10, outterRect_y, 600, height);

            for (int j = 0; j < 3 + i * 2; j++)
            {
                await this._context.SetFillStyleAsync("red");
                await this._context.FillRectAsync(30 + j * (part_x + 10), outterRect_y + 10, part_x, part_y);
            }
        }
    }


    // canvas events:
    double begin_x, begin_y, end_x, end_y;
    List<Point> path;

    protected async Task canvasMouseDown(MouseEventArgs args)
    {
        begin_x = args.OffsetX;
        begin_y = args.OffsetY;

        //创建新path2D
        await this._context.BeginPathAsync();
        await this._context.MoveToAsync(begin_x, begin_y);

    }

    protected async Task canvasMouseMove(MouseEventArgs args)
    {
        await this._context.MoveToAsync(args.OffsetX, args.OffsetY);
    }

    protected async Task canvasMouseUp(MouseEventArgs args)
    {
        end_x = args.OffsetX;
        end_y = args.OffsetY;

        // 生成闭合路线
        await this._context.MoveToAsync(end_x, end_y);
        await this._context.LineToAsync(begin_x, begin_y);
        await this._context.ClosePathAsync();
        await this._context.StrokeAsync();
    }

    [Inject]
    private DialogService? dialogService { get; set; }

    protected Task player1BtnClick() => dialogService.Show(new DialogOption()
    {
        Title = "我是服务创建的弹出框",
        BodyTemplate = BootstrapDynamicComponent.CreateComponent<Button>(new KeyValuePair<string, object>[]
            {
                new(nameof(Button.ChildContent), new RenderFragment(builder => builder.AddContent(0, "我是服务创建的按钮")))
            })
            .Render()
    });

    protected Task player2BtnClick() => dialogService.Show(new DialogOption()
    {

    });



}
